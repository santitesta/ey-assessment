import { Controller, Get, Query } from '@nestjs/common';
import { ContactsService } from './contacts.service';
import { ApiOperation, ApiResponse, ApiTags, ApiQuery } from '@nestjs/swagger';

@ApiTags('Text Encoding Challenge')
@Controller()
export class ContactsController {
  constructor(private readonly contactsService: ContactsService) {}

  @Get()
  @ApiOperation({
    summary: 'Encode text into a column-major order table',
    description: `
      This endpoint encodes a given text based on the following rules:
      - All spaces are removed from the text.
      - The text is arranged into a table such that:
        1. \`floor(sqrt(L)) <= rows <= columns <= ceil(sqrt(L))\`, where \`L\` is the length of the cleaned text.
        2. \`rows * columns >= L\`.
        3. If multiple configurations satisfy these conditions, the one with the smallest area is chosen.
      - The output is generated by reading the table column by column, inserting spaces between columns.
    `,
  })
  @ApiQuery({
    name: 'input',
    description: 'The input text to be encoded.',
    required: true,
    type: String,
    example: 'cheating is not allowed',
  })
  @ApiResponse({
    status: 200,
    description: 'The encoded text based on the given rules.',
    type: String,
  })
  encodeText(@Query('input') inputText: string): Promise<string> {
    if (!inputText) {
      throw new Error('Query parameter "text" is required');
    }
    return this.contactsService.testAssessment(inputText);
  }
}
